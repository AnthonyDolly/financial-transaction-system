services:
  # PostgreSQL Database - Producción
  postgres:
    image: postgres:15-alpine
    container_name: financial-postgres-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - financial-network-prod
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache - Producción
  redis:
    image: redis:7-alpine
    container_name: financial-redis-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data_prod:/data
    networks:
      - financial-network-prod
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación Principal - Producción
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: financial-app-prod
    restart: unless-stopped
    # La sección de puertos ha sido eliminada.
    # La comunicación se hará internamente a través de la red de Docker.
    env_file:
      - .env.prod
    environment:
      # Configuración de la aplicación
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      API_PREFIX: ${API_PREFIX}
      DEFAULT_PASSWORD: ${DEFAULT_PASSWORD}
      # ... (resto de las variables de entorno)
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE_IN: ${JWT_EXPIRE_IN}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRE_IN: ${JWT_REFRESH_EXPIRE_IN}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FILE: ${LOG_FILE}
      SWAGGER_TITLE: ${SWAGGER_TITLE}
      SWAGGER_DESCRIPTION: ${SWAGGER_DESCRIPTION}
      SWAGGER_VERSION: ${SWAGGER_VERSION}
      SWAGGER_CONTACT_NAME: ${SWAGGER_CONTACT_NAME}
      SWAGGER_CONTACT_EMAIL: ${SWAGGER_CONTACT_EMAIL}
      ENABLE_CORS: ${ENABLE_CORS}
      TRUST_PROXY: ${TRUST_PROXY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      AZURE_APP_NAME: ${AZURE_APP_NAME}
    volumes:
      - app_logs:/app/logs
    networks:
      - financial-network-prod
      - proxy-network # Añade la red compartida
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      # Usa el puerto interno del contenedor (3000) para el healthcheck
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:${PORT}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # El servicio Nginx ha sido eliminado de este archivo

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  app_logs:
    driver: local

networks:
  financial-network-prod:
    driver: bridge
  proxy-network:
    external: true