services:
  # PostgreSQL Database - Producción
  postgres:
    image: postgres:15-alpine
    container_name: financial-postgres-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - financial-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache - Producción
  redis:
    image: redis:7-alpine
    container_name: financial-redis-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - financial-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación Principal - Producción
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: financial-app-prod
    restart: unless-stopped
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - .env.prod
    environment:
      # Configuración de la aplicación
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      API_PREFIX: ${API_PREFIX}
      DEFAULT_PASSWORD: ${DEFAULT_PASSWORD}
      
      # Base de datos
      DATABASE_URL: ${DATABASE_URL}
      
      # Redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE_IN: ${JWT_EXPIRE_IN}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRE_IN: ${JWT_REFRESH_EXPIRE_IN}
      
      # Seguridad
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FILE: ${LOG_FILE}
      
      # Swagger
      SWAGGER_TITLE: ${SWAGGER_TITLE}
      SWAGGER_DESCRIPTION: ${SWAGGER_DESCRIPTION}
      SWAGGER_VERSION: ${SWAGGER_VERSION}
      
      # Desarrollo
      ENABLE_CORS: ${ENABLE_CORS}
      TRUST_PROXY: ${TRUST_PROXY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}

      # Azure
      AZURE_APP_NAME: ${AZURE_APP_NAME}
    volumes:
      - app_logs:/app/logs
    networks:
      - financial-network-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: financial-nginx-prod
    restart: unless-stopped
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_PORT_SSL}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - financial-network-prod
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  financial-network-prod:
    driver: bridge 